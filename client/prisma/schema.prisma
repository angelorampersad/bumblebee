generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String @id @default(uuid()) @db.Uuid
  name        String
  description String
  plans       Plan[]
}

model Plan {
  id             String          @id @default(uuid()) @db.Uuid
  name           String
  description    String
  published      Boolean         @default(false)
  label          String
  tier           String          @default("tier_3")
  pillar         String          @default("customer")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  Product        Product?        @relation(fields: [productId], references: [id])
  productId      String?         @db.Uuid
  specifications Specification[]
}

model Specification {
  id       String   @id @default(uuid()) @db.Uuid
  test     String
  event    String
  contexts String[]
  Plan     Plan?    @relation(fields: [planId], references: [id])
  planId   String?  @db.Uuid
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
